/**
 *  Copyright [2014] [mokap.es]
 *
 *    This file is part of the mokap community backend (MCB).
 *    MCB is licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */
package es.eucm.mokap.backend.data.db;

import com.google.appengine.api.datastore.Entity;
import com.google.appengine.api.datastore.Key;
import com.google.appengine.api.search.Results;
import com.google.appengine.api.search.ScoredDocument;
import es.eucm.mokap.backend.model.search.SearchParams;

import java.io.IOException;
import java.util.Map;

/**
 * This interface offers some methods to allow the service to interact with a
 * database
 */
public interface DatabaseInterface {

	/**
	 * Search the Datastore applying the filters passed in the Searchfilters
	 * object
	 * 
	 * @param sp
	 *            Filters and parameters needed for the search
	 * @return Results object, similar to a list:
	 *         https://cloud.google.com/appengine/docs/java/search/results
	 * @throws IOException
	 */
	Results<ScoredDocument> searchByString(SearchParams sp) throws IOException;

	/**
	 * Stores an entity in Google Datastore. See
	 * https://cloud.google.com/appengine
	 * /docs/java/javadoc/com/google/appengine/api/datastore/Entity See
	 * https://cloud
	 * .google.com/appengine/docs/java/javadoc/com/google/appengine/
	 * api/datastore/Key
	 * 
	 * @param ent
	 *            The entity to store
	 * @return The Key generated by Google Datastore for the entity
	 */
	Key storeEntity(Entity ent);

	/**
	 * Deletes an entity from Google Datastore
	 * 
	 * @param keyId
	 *            Key id of the entity to delete
	 */
	void deleteEntity(long keyId);

	/**
	 * Looks for the entity with the Key id supplied in Datastore, converts it
	 * into a HashMap<String, Object> and returns it
	 * 
	 * @param keyId
	 *            Key id of the entity we're looking for
	 * @return A HashMap with all the data in the entity
	 */
	Map<String, Object> getEntityByIdAsMap(long keyId);

	/**
	 * Adds an entity to The search Index.
	 * 
	 * @param ent
	 *            The entity to add
	 * @param k
	 *            The key of the entity in Datastore
	 */
	void addToSearchIndex(Entity ent, Key k);
}
