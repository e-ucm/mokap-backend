/**
 *  Copyright [2014] [mokap.es]
 *
 *    This file is part of the mokap community backend (MCB).
 *    MCB is licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */
package es.eucm.mokap.backend.model.search;

import es.eucm.ead.schemax.repo.RepoElementFields;

import java.util.HashMap;
import java.util.Map;

/**
 * Created by mario on 11/12/2014. Class that contains all the parameters we
 * need to perform a text search, either filtered or not
 * 
 * The query string is generated by the method getSearchQuery depending on the
 * parameters we actually use in this query.
 */
public class TextSearchParams extends SearchParams {
	private String searchString;
	private String publisherFilter;
	private String libraryIdFilter;
	private String categoryIdFilter;
	private String tagFilter;

	/**
	 * Default constructor with all the fields
	 * 
	 * @param searchString
	 *            String to search for in all the Database entity fields
	 * @param publisherFilter
	 *            Name of the publisher
	 * @param libraryIdFilter
	 *            Id of the library
	 * @param categoryIdFilter
	 *            Id of the category
	 * @param tagFilter
	 *            Tag (or tags) we're looking for
	 * @param searchCursor
	 *            String that can be processed to resume a previous search, see
	 * 
	 *            <pre>
	 *            <a href="https://cloud.google.com/appengine/docs/java/javadoc/com/google/appengine/api/datastore/Cursor">
	 *            https://cloud.google.com/appengine/docs/java/javadoc/com/google/appengine/api/datastore/Cursor
	 *            </a>
	 * </pre>
	 */
	public TextSearchParams(String searchString, String publisherFilter,
			String libraryIdFilter, String categoryIdFilter, String tagFilter,
			String searchCursor, String width, String height) {
		super(searchCursor);
		this.publisherFilter = publisherFilter;
		this.libraryIdFilter = libraryIdFilter;
		this.categoryIdFilter = categoryIdFilter;
		this.tagFilter = tagFilter;
		this.searchString = searchString;
		this.width = width;
		this.height = height;
	}

	@Override
	public String getSearchQuery() {
		int i = 0;
		String queryString = "";
		// We will only add the searchString if it is not null
		if (this.searchString != null) {
			queryString = this.searchString + " ";
		}
		Map<String, String> activeFilters = getActiveFilters();

		for (String key : activeFilters.keySet()) {
			if (i != 0)
				queryString += " AND ";

			queryString += key + " = " + activeFilters.get(key);
			i++;
		}
		return queryString;
	}

	/**
	 * Generates a map with the filters that are not set to null. The keys of
	 * the map are the names of the RepoElementFields constants that correspond
	 * to the values of the filters we have.
	 * 
	 * @return The map with the active filters.
	 */
	Map<String, String> getActiveFilters() {
		HashMap<String, String> activeFilters = new HashMap<String, String>();
		if (this.categoryIdFilter != null) {
			activeFilters.put(RepoElementFields.CATEGORYLIST, categoryIdFilter);
		}
		if (this.libraryIdFilter != null) {
			activeFilters.put(RepoElementFields.LIBRARYID, libraryIdFilter);
		}
		if (this.publisherFilter != null) {
			activeFilters.put(RepoElementFields.PUBLISHER, publisherFilter);
		}
		if (this.tagFilter != null) {
			activeFilters.put(RepoElementFields.TAGLIST, tagFilter);
		}
		return activeFilters;
	}

	public String getSearchString() {
		return searchString;
	}

	public void setSearchString(String searchString) {
		this.searchString = searchString;
	}

	public String getPublisherFilter() {
		return publisherFilter;
	}

	public void setPublisherFilter(String publisherFilter) {
		this.publisherFilter = publisherFilter;
	}

	public String getLibraryIdFilter() {
		return libraryIdFilter;
	}

	public void setLibraryIdFilter(String libraryIdFilter) {
		this.libraryIdFilter = libraryIdFilter;
	}

	public String getCategoryIdFilter() {
		return categoryIdFilter;
	}

	public void setCategoryIdFilter(String categoryIdFilter) {
		this.categoryIdFilter = categoryIdFilter;
	}

	public String getTagFilter() {
		return tagFilter;
	}

	public void setTagFilter(String tagFilter) {
		this.tagFilter = tagFilter;
	}
}
